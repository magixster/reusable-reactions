{"version":3,"sources":["reusable/utils.js","reusable/Reactions.js","components/Posts/Post.js","components/Posts/index.js","Mock/Cards.js","App.js","Constants.js","utils.js","serviceWorker.js","index.js","reusable/Reactions.module.scss","App.module.scss"],"names":["getUsersWithContentIdAndReaction","allusers","userReactedToContent","content_id","id","filter","reaction_id","map","user_id","find","TabPane","Tabs","Reactions","reactions","users","updateUserReactionOnEmoji","removeUserReactionOnEmoji","userHasReacted","useState","clicked","handleClickChange","userHasReactedOnContent","hasReacted","className","styles","container","reactionsContainer","name","emoji","overlayClassName","reactionsContainer__tooltip","color","placement","title","key","onClick","reactionsContainer__emoji","container__userReaction","reaction","content","size","defaultActiveKey","onChange","usersData","disabled","length","tab","avatar","first_name","container__userListItem","style","borderRadius","height","width","src","alt","container__userListItem_name","type","icon","UserAddOutlined","getContentViewForEmoji","trigger","visible","onVisibleChange","container__userReactedTabsClick","Meta","Card","Post","img","description","reactionsWithUsers","loading","error","isReactionsLoading","hoverable","cover","paragraph","rows","Posts","posts","rest","post","POST_LIST","App","useFetch","get","del","setReactionsWithUsers","setUserReactedToContent","reduce","acc","hasReached","updatedUserReaction","setUpdatedUserReaction","useEffect","a","loadReactionsAndUsers","getReactionsForContentId","data","val","d","newUserReaction","reactedContentId","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.b85bb7be.chunk.js","sourcesContent":["export const getUsersWithContentIdAndReaction = (allusers, userReactedToContent, content_id, id) => {\n  const userIdListByReactions = userReactedToContent[content_id].filter(({ reaction_id }) => reaction_id === id);\n    return userIdListByReactions.map(({ user_id}) => allusers.find(({ id }) => id === user_id ))\n};\n","import React, { useState } from 'react';\nimport { Tooltip, Popover, Tabs, Button } from 'antd';\nimport { UserAddOutlined } from '@ant-design/icons';\nimport styles from './Reactions.module.scss';\nimport { getUsersWithContentIdAndReaction } from './utils';\n\nconst { TabPane } = Tabs;\n\nexport const Reactions = ({\n  reactions,\n  userReactedToContent,\n  content_id,\n  users,\n  updateUserReactionOnEmoji,\n  removeUserReactionOnEmoji,\n  userHasReacted,\n}) => {\n  const [clicked, handleClickChange] = useState(false);\n  const userHasReactedOnContent = userHasReacted[content_id].hasReacted;\n\n  const getContentViewForEmoji = (id) => {\n    const usersData = getUsersWithContentIdAndReaction(users, userReactedToContent, content_id, id);\n\n    return usersData.map(({ id, avatar, first_name }) => (\n      <div key={id} className={styles.container__userListItem}>\n        <div>\n          <img style={{ borderRadius: '50%', height: '35px', width: '35px' }} src={avatar} alt={first_name} />\n          <span className={styles.container__userListItem_name}>{first_name}</span>\n        </div>\n        <div>\n        <Button type=\"primary\" icon={<UserAddOutlined />}> Add Friend </Button>\n        </div>\n      </div>));\n  };\n\n  const allReactionsByUsers = () => (\n    <div>\n      <Tabs size={'small'} defaultActiveKey={reactions[0].id} onChange={() => {}}>\n      {reactions.map(({ id, emoji }) => {\n        const usersData = getUsersWithContentIdAndReaction(users, userReactedToContent, content_id, id);\n\n        return (\n          <TabPane disabled={!usersData.length} tab={`${emoji} ${usersData.length}`} key={id}>\n            {getContentViewForEmoji(id)}\n          </TabPane>\n      );\n      })}\n      <TabPane>\n        <span tab={'x'} onClick={() => handleClickChange(false)}></span>\n      </TabPane>\n      </Tabs>\n    </div>\n  );\n\n  return (\n    <div>\n      <div className={styles.container}>\n      <div className={styles.reactionsContainer}>\n      {reactions.map(({ id, name, emoji }) => (\n        <Tooltip overlayClassName={styles.reactionsContainer__tooltip} color={'#161616'} placement=\"top\" title={name} key={id}>\n          <div\n            key={id}\n            onClick={() => {\n              if(!userHasReacted[content_id].hasReacted) {\n                updateUserReactionOnEmoji(id, content_id);\n              } else {\n                removeUserReactionOnEmoji(content_id);\n              }\n            }\n            }\n            className={styles.reactionsContainer__emoji}\n          >{emoji}</div>\n        </Tooltip>\n    ))}\n      </div>\n      {userHasReactedOnContent &&\n      <span className={styles.container__userReaction}>\n      <Tooltip overlayClassName={styles.reactionsContainer__tooltip} color={'#161616'} placement=\"top\" title={'You reacted'}>\n        {reactions.find(reaction => reaction.id === userHasReacted[content_id].reaction_id).emoji}\n        </Tooltip>\n      </span>\n    }\n      </div>\n      <Popover\n        key={content_id}\n        content={allReactionsByUsers}\n        trigger=\"click\"\n        placement=\"bottom\"\n        visible={clicked}\n        onVisibleChange={(visible) => handleClickChange(visible) }\n      >\n      <span className={styles.container__userReactedTabsClick}>\n        {userReactedToContent[content_id].length} others reacted\n      </span>\n      </Popover>\n    </div>);\n};\n\n","import React from 'react';\nimport { Card, Skeleton } from 'antd';\nimport { Reactions } from '../../reusable/Reactions';\n\nconst { Meta } = Card;\n\nconst Post = ({\n  id,\n  title,\n  img,\n  description,\n  content_id,\n  reactionsWithUsers: { reactions = [], users = [] },\n  loading,\n  error,\n  userReactedToContent,\n  updateUserReactionOnEmoji,\n  removeUserReactionOnEmoji,\n  userHasReacted,\n}) => {\n  const isReactionsLoading = !(reactions.length && users.length && userReactedToContent[content_id]);\n\n  return (\n    <Card\n    key={id}\n    hoverable\n    style={{ width: 350 }}\n    cover={<img alt={title} width={300} height={300} src={img} />}\n  >\n    <Meta title={title} description={description} />\n    <p>{error && 'Something went wrong!'}</p>\n    <Skeleton loading={isReactionsLoading} paragraph={{ rows: 1 }}>\n      <Reactions\n        reactions={reactions}\n        loading={loading}\n        userReactedToContent={userReactedToContent}\n        content_id={content_id}\n        users={users}\n        updateUserReactionOnEmoji={updateUserReactionOnEmoji}\n        removeUserReactionOnEmoji={removeUserReactionOnEmoji}\n        userHasReacted={userHasReacted}\n        />\n    </Skeleton>\n  </Card>\n  );\n};\n\nexport default Post;","import React from 'react'\nimport Post from './Post'\n\nconst Posts = ({ posts, ...rest }) => (\n    posts.map((post) => <Post {...post} {...rest} />)\n  );\n\nexport default Posts;","export const POST_LIST = [\n  {\n    id: 2,\n    content_id: 2,\n    img: 'https://images.unsplash.com/photo-1503572327579-b5c6afe5c5c5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=311&q=80',\n    title: 'Statue of liberty',\n    description: 'www.facebook.com'\n  },\n  {\n    id: 3,\n    content_id: 1,\n    img: 'https://images.unsplash.com/photo-1592093506632-92ef342e2591?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=311&q=80',\n    title: 'LinkedIn SF office',\n    description: 'www.linkedin.com'\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport useFetch from 'use-http'\nimport Posts from './components/Posts';\nimport { POST_LIST } from './Mock/Cards';\nimport { BASE_URL } from './Constants';\n\nimport styles from './App.module.scss';\nimport { defaultReactionState } from './utils';\n\n\nfunction App() {\n  const { get, post, del, loading, error } = useFetch(`${BASE_URL}`);\n  const [reactionsWithUsers, setReactionsWithUsers] = useState({});\n  const [userReactedToContent, setUserReactedToContent] = useState(null);\n  const [updatedUserReaction, setUpdatedUserReaction] = useState(defaultReactionState(POST_LIST));\n\n  useEffect(() => {\n    async function loadReactionsAndUsers(){\n      const reactions = await get(`/reactions`);\n      const users = await get(`/users`);\n\n      setReactionsWithUsers({ reactions, users });\n    }\n    loadReactionsAndUsers();\n    getReactionsForContentId();\n  }, [])\n\n  const getReactionsForContentId = async () => {\n    const data = await get(`/user_content_reactions`);\n    setUserReactedToContent(data.reduce((acc, val) =>\n      ({ ...acc, [val.content_id]: [...data.filter(d => d.content_id === val.content_id)]}),\n    {}));\n  }\n\n  const updateUserReactionOnEmoji = async (reaction_id, content_id) => {\n    const newUserReaction = await post(`/user_content_reactions`, {\n      user_id: 4,\n      reaction_id: reaction_id,\n      content_id: content_id,\n    });\n    setUpdatedUserReaction({ ...updatedUserReaction, [newUserReaction.content_id]: { ...newUserReaction, hasReacted: true } });\n    getReactionsForContentId();\n  }\n\n  const removeUserReactionOnEmoji = async (content_id) => {\n    const reactedContentId = updatedUserReaction[content_id].id;\n    await del(`/user_content_reactions/${reactedContentId}`);\n    setUpdatedUserReaction({ ...updatedUserReaction, [content_id]: { ...updatedUserReaction[content_id], hasReacted: false } });\n    getReactionsForContentId();\n  }\n\n  return (\n    <div className={styles.app}>\n      <Posts\n        posts={POST_LIST}\n        reactionsWithUsers={reactionsWithUsers}\n        loading={loading}\n        error={error}\n        getReactionsForContentId={getReactionsForContentId}\n        userReactedToContent={userReactedToContent}\n        updateUserReactionOnEmoji={updateUserReactionOnEmoji}\n        removeUserReactionOnEmoji={removeUserReactionOnEmoji}\n        userHasReacted={updatedUserReaction}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","export const BASE_URL = 'https://artful-iudex.herokuapp.com';","export const defaultReactionState = (posts) =>\n  posts.reduce((acc, { content_id }) => (\n    { ...acc,\n      [content_id]: { hasReached: false }\n    }),\n  {});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reactionsContainer\":\"Reactions_reactionsContainer__3xNvf\",\"reactionsContainer__emoji\":\"Reactions_reactionsContainer__emoji__3Yn_x\",\"reactionsContainer__tooltip\":\"Reactions_reactionsContainer__tooltip__1Nm6f\",\"container\":\"Reactions_container__1fpxE\",\"container__userReaction\":\"Reactions_container__userReaction__2M5kP\",\"container__userListItem\":\"Reactions_container__userListItem__2m0MK\",\"container__userListItem_name\":\"Reactions_container__userListItem_name__3ZPoe\",\"container__userReactedTabsClick\":\"Reactions_container__userReactedTabsClick__3R0O1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};"],"sourceRoot":""}